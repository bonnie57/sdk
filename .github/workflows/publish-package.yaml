name: Publish to npm, Tag and create GH Release

on:
  push:
    branches:
      - main
      - v1.1
env:
  VERSION_1_1: "1.1"
  VERSION_1_2: "1.2"
  MAIN: "main"
  DEV: "dev"

jobs:
  Timestamp:
    uses: storyprotocol/gha-workflows/.github/workflows/reusable-timestamp.yml@main

  print_version_to_publish:
    needs: [Timestamp]
    runs-on: ubuntu-latest
    outputs:
      core_sdk_version_to_be_published: ${{ steps.get_version_to_publish.outputs.CORE_SDK_VERSION_TO_BE_PUBLISHED }}
      react_sdk_version_to_be_published: ${{ steps.get_version_to_publish.outputs.REACT_SDK_VERSION_TO_BE_PUBLISHED }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get version to publish
        id: get_version_to_publish
        run: |
          content=$(cat packages/core-sdk/package.json)
          echo "CORE_SDK_VERSION_TO_BE_PUBLISHED=$(echo $content | jq -r '.version')" >> $GITHUB_OUTPUT

  # Fetch the latest version from NPM
  fetch_latest_version:
    needs: [Timestamp]
    runs-on: ubuntu-latest
    outputs:
      core_sdk_latest_version: ${{ steps.get_latest_version.outputs.CORE_SDK_LATEST_VERSION }}
    steps:
      - name: Get latest package version
        id: get_latest_version
        run: |
          get_latest_version() {
            prefix=$1
            package_name=$2
            variable_key=$3
            all_versions=$(npm view "$package_name" versions --json)
            if [[ "$all_versions" == "["* ]]; then
              filtered_versions=$(echo "$all_versions" | jq -r "[.[] | select(startswith(\"$prefix\"))]")
              echo "filtered_versions1: $filtered_versions"
            else
              filtered_versions=$(echo "[$all_versions]" | jq -r "[.[] | select(startswith(\"$prefix\"))]") 
              echo "filtered_versions2: $filtered_versions"
            fi
            latest_version=$(echo "$filtered_versions" | jq -r '.[-1]')
            if [ "$latest_version" == "null" ]; then
              latest_version="Not_Published"
            fi
            echo "Latest version of $package_name on NPMJS with prefix $prefix is $latest_version"
            echo "$variable_key=$latest_version" >> $GITHUB_OUTPUT    
          }
          get_latest_version "${{ env.VERSION_1_2 }}" "bonnie57" "CORE_SDK_LATEST_VERSION"
  build-test-publish:
    needs: [print_version_to_publish, fetch_latest_version]
    if: ${{ github.event_name == 'push'  }}
    # Skip this job if the core-sdk and react-sdk don't need to be published
    # and the event triggering the workflow is a push
    runs-on: ubuntu-latest
    environment: "beta-sepolia"
    env:
      RPC_PROVIDER_URL: ${{ secrets.RPC_PROVIDER_URL }}
      WALLET_PRIVATE_KEY: ${{ secrets.WALLET_PRIVATE_KEY }}
      TEST_WALLET_ADDRESS: ${{ secrets.TEST_WALLET_ADDRESS }}
      SEPOLIA_RPC_PROVIDER_URL: ${{ secrets.SEPOLIA_RPC_PROVIDER_URL }}
      TEST_SEPOLIA_RPC_PROVIDER_URL: ${{ secrets.TEST_SEPOLIA_RPC_PROVIDER_URL }}
      SEPOLIA_WALLET_PRIVATE_KEY: ${{ secrets.SEPOLIA_WALLET_PRIVATE_KEY }}
      SEPOLIA_TEST_WALLET_ADDRESS: ${{ secrets.SEPOLIA_TEST_WALLET_ADDRESS }}
      STORY_TEST_NET_RPC_PROVIDER_URL: ${{ secrets.STORY_TEST_NET_RPC_PROVIDER_URL }}
      STORY_TEST_NET_WALLET_PRIVATE_KEY: ${{ secrets.STORY_TEST_NET_WALLET_PRIVATE_KEY }}
      STORY_TEST_NET_TEST_WALLET_ADDRESS: ${{ secrets.STORY_TEST_NET_TEST_WALLET_ADDRESS }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 8.8.0

      - name: Setup Node.js environment
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8 # v4.0.1
        with:
          node-version: 20.0.0
          cache: pnpm
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Publish core-sdk package to npm
        if: ${{ github.event_name == 'push' }}
        run: |
          cd packages/core-sdk
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release-core-sdk:
    needs: [build-test-publish, print_version_to_publish]
    # Skip this job if core-sdk doesn't need to be published
    # and the event triggering the workflow is a push
    uses: ./.github/workflows/reusable-create-release.yml
    with:
      tag_name: core-sdk@${{ needs.print_version_to_publish.outputs.core_sdk_version_to_be_published }}
