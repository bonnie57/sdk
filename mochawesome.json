{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-17T07:08:40.670Z",
    "end": "2025-07-17T07:10:02.370Z",
    "duration": 81700,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6d7f18ea-c35d-410f-a332-00f5aff71e6a",
      "title": "",
      "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
      "file": "/test/integration/dispute.test.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d86975b1-f234-47f6-bd73-9c4203ddab0a",
          "title": "Dispute Functions",
          "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
          "file": "/test/integration/dispute.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Dispute Functions\"",
              "fullTitle": "Dispute Functions \"before all\" hook in \"Dispute Functions\"",
              "timedOut": false,
              "duration": 9227,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clientA = (0, util_1.getStoryClient)();\nconst derivedClient = await (0, BIP32_1.getDerivedStoryClient)();\nclientB = derivedClient.clientB;\nminimumBond = await (0, oov3_1.getMinimumBond)(util_1.publicClient, new generated_1.ArbitrationPolicyUmaClient(util_1.publicClient, util_1.walletClient), src_1.WIP_TOKEN_ADDRESS);\nconst txData = await clientA.nftClient.createNFTCollection({\n    name: \"test-collection\",\n    symbol: \"TEST\",\n    maxSupply: 100,\n    isPublicMinting: true,\n    mintOpen: true,\n    contractURI: \"test-uri\",\n    mintFeeRecipient: util_1.TEST_WALLET_ADDRESS,\n});\nconst nftContract = txData.spgNftContract;\nipIdB = (await clientB.ipAsset.mintAndRegisterIp({\n    spgNftContract: nftContract,\n})).ipId;",
              "err": {},
              "uuid": "94a5434f-00f0-4450-8681-afef2200d308",
              "parentUUID": "d86975b1-f234-47f6-bd73-9c4203ddab0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b83321e1-bdf7-44b5-9c0f-af551a404651",
              "title": "raiseDispute and counter dispute",
              "fullFile": "/home/runner/work/sdk/sdk/packages/core-sdk/test/integration/dispute.test.ts",
              "file": "/test/integration/dispute.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should raise a dispute",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should raise a dispute",
                  "timedOut": false,
                  "duration": 9266,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const raiseDisputeRequest = {\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: src_1.DisputeTargetTag.IMPROPER_REGISTRATION,\n    liveness: 2592000,\n    bond: minimumBond,\n};\nconst response = await clientA.dispute.raiseDispute(raiseDisputeRequest);\n(0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n(0, chai_1.expect)(response.disputeId).to.be.a(\"bigint\");\ndisputeId = response.disputeId;",
                  "err": {},
                  "uuid": "ab97b5ef-6c77-443d-8897-658d59f9c118",
                  "parentUUID": "b83321e1-bdf7-44b5-9c0f-af551a404651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate all enum values defined in DisputeTargetTag",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should validate all enum values defined in DisputeTargetTag",
                  "timedOut": false,
                  "duration": 237,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allTags = Object.values(src_1.DisputeTargetTag);\nfor (const tag of allTags) {\n    const tagHex = (0, viem_1.toHex)(tag, { size: 32 });\n    const { allowed } = await clientA.dispute.disputeModuleClient.isWhitelistedDisputeTag({\n        tag: tagHex,\n    });\n    if (tag === src_1.DisputeTargetTag.IN_DISPUTE) {\n        (0, chai_1.expect)(allowed).equal(false);\n    }\n    else {\n        (0, chai_1.expect)(allowed).equal(true);\n    }\n}",
                  "err": {},
                  "uuid": "483e5afb-34da-4174-8b3c-394c9359f264",
                  "parentUUID": "b83321e1-bdf7-44b5-9c0f-af551a404651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should raise disputes with different DisputeTargetTag enum values",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should raise disputes with different DisputeTargetTag enum values",
                  "timedOut": false,
                  "duration": 44949,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const allTags = Object.values(src_1.DisputeTargetTag);\nfor (const tag of allTags) {\n    const raiseDisputeRequest = {\n        targetIpId: ipIdB,\n        cid: await generateCID(),\n        targetTag: tag,\n        liveness: 2592000,\n        bond: minimumBond,\n    };\n    if (tag === src_1.DisputeTargetTag.IN_DISPUTE) {\n        await (0, chai_1.expect)(clientA.dispute.raiseDispute(raiseDisputeRequest)).to.be.rejectedWith(\"The target tag IN_DISPUTE is not whitelisted\");\n    }\n    else {\n        const response = await clientA.dispute.raiseDispute(raiseDisputeRequest);\n        (0, chai_1.expect)(response.txHash).to.be.a(\"string\");\n        (0, chai_1.expect)(response.disputeId).to.be.a(\"bigint\");\n    }\n}",
                  "err": {},
                  "uuid": "20e7102f-e028-420d-b7c8-084b35df4d16",
                  "parentUUID": "b83321e1-bdf7-44b5-9c0f-af551a404651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject a dispute with an invalid tag not defined in the enum",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should reject a dispute with an invalid tag not defined in the enum",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await (0, chai_1.expect)(clientA.dispute.raiseDispute({\n    targetIpId: ipIdB,\n    cid: await generateCID(),\n    targetTag: \"INVALID_TAG\",\n    liveness: 2592000,\n    bond: minimumBond,\n})).to.be.rejectedWith(\"The target tag INVALID_TAG is not whitelisted\");",
                  "err": {},
                  "uuid": "9725ef77-05e1-4af4-b3ad-3ee8523be89e",
                  "parentUUID": "b83321e1-bdf7-44b5-9c0f-af551a404651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be able to counter existing dispute once",
                  "fullTitle": "Dispute Functions raiseDispute and counter dispute should be able to counter existing dispute once",
                  "timedOut": false,
                  "duration": 17824,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const assertionId = await clientB.dispute.disputeIdToAssertionId(disputeId);\nconst counterEvidenceCID = await generateCID();\nconst ret = await clientB.dispute.disputeAssertion({\n    ipId: ipIdB,\n    assertionId,\n    counterEvidenceCID,\n});\n(0, chai_1.expect)(ret.txHash).to.be.a(\"string\");\n// should throw error if attempting to dispute assertion again\nawait (0, chai_1.expect)(clientB.dispute.disputeAssertion({\n    ipId: ipIdB,\n    assertionId,\n    counterEvidenceCID,\n})).to.be.rejected;",
                  "err": {},
                  "uuid": "e13dd9a6-38cc-40ee-9538-14da7c2a17a7",
                  "parentUUID": "b83321e1-bdf7-44b5-9c0f-af551a404651",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab97b5ef-6c77-443d-8897-658d59f9c118",
                "483e5afb-34da-4174-8b3c-394c9359f264",
                "20e7102f-e028-420d-b7c8-084b35df4d16",
                "9725ef77-05e1-4af4-b3ad-3ee8523be89e",
                "e13dd9a6-38cc-40ee-9538-14da7c2a17a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 72465,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}